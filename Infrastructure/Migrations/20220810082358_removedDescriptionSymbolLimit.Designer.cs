// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eStore.Infrastructure.Persistence;

namespace eStore.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220810082358_removedDescriptionSymbolLimit")]
    partial class removedDescriptionSymbolLimit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eStore.Application.Entities.Backlight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Backlights");
                });

            modelBuilder.Entity("eStore.Application.Entities.CompatibleDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CompatibleDevicess");
                });

            modelBuilder.Entity("eStore.Application.Entities.ConnectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ConnectionTypes");
                });

            modelBuilder.Entity("eStore.Application.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("IdentityId")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("ShoppingCartId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("eStore.Application.Entities.DeviceConnectionType", b =>
                {
                    b.Property<int>("GoodsId")
                        .HasColumnType("int");

                    b.Property<int>("ConnectionTypeId")
                        .HasColumnType("int");

                    b.HasKey("GoodsId", "ConnectionTypeId");

                    b.HasIndex("ConnectionTypeId");

                    b.ToTable("DeviceConnectionTypes");
                });

            modelBuilder.Entity("eStore.Application.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("eStore.Application.Entities.GamepadCompatibleDevice", b =>
                {
                    b.Property<int>("GamepadId")
                        .HasColumnType("int");

                    b.Property<int>("CompatibleDeviceId")
                        .HasColumnType("int");

                    b.HasKey("GamepadId", "CompatibleDeviceId");

                    b.HasIndex("CompatibleDeviceId");

                    b.ToTable("GamepadCompatibleDevices");
                });

            modelBuilder.Entity("eStore.Application.Entities.Goods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Goods");
                });

            modelBuilder.Entity("eStore.Application.Entities.GoodsInCart", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("GoodsId")
                        .HasColumnType("int");

                    b.HasKey("CartId", "GoodsId");

                    b.HasIndex("GoodsId");

                    b.ToTable("GoodsInCarts");
                });

            modelBuilder.Entity("eStore.Application.Entities.KeyRollover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("KeyRollovers");
                });

            modelBuilder.Entity("eStore.Application.Entities.KeyboardSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("KeyboardSizes");
                });

            modelBuilder.Entity("eStore.Application.Entities.KeyboardSwitch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsClicking")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTactile")
                        .HasColumnType("bit");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("KeyboardSwitches");
                });

            modelBuilder.Entity("eStore.Application.Entities.KeyboardType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("KeyboardTypes");
                });

            modelBuilder.Entity("eStore.Application.Entities.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("eStore.Application.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("eStore.Application.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ShippingAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ShippingCity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingPostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("eStore.Application.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GoodsId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("GoodsId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("eStore.Application.Entities.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("eStore.Application.Entities.Gamepad", b =>
                {
                    b.HasBaseType("eStore.Application.Entities.Goods");

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasIndex("FeedbackId");

                    b.ToTable("Gamepads");
                });

            modelBuilder.Entity("eStore.Application.Entities.Keyboard", b =>
                {
                    b.HasBaseType("eStore.Application.Entities.Goods");

                    b.Property<int>("BacklightId")
                        .HasColumnType("int");

                    b.Property<int>("FrameMaterialId")
                        .HasColumnType("int");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<int>("KeyRolloverId")
                        .HasColumnType("int");

                    b.Property<int>("KeycapMaterialId")
                        .HasColumnType("int");

                    b.Property<float>("Length")
                        .HasColumnType("real");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.Property<int?>("SwitchId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasIndex("BacklightId");

                    b.HasIndex("FrameMaterialId");

                    b.HasIndex("KeyRolloverId");

                    b.HasIndex("KeycapMaterialId");

                    b.HasIndex("SizeId");

                    b.HasIndex("SwitchId");

                    b.HasIndex("TypeId");

                    b.ToTable("Keyboards");
                });

            modelBuilder.Entity("eStore.Application.Entities.Mouse", b =>
                {
                    b.HasBaseType("eStore.Application.Entities.Goods");

                    b.Property<int>("BacklightId")
                        .HasColumnType("int");

                    b.Property<int>("ButtonsQuantity")
                        .HasColumnType("int");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<float>("Length")
                        .HasColumnType("real");

                    b.Property<int>("MaxSensorDPI")
                        .HasColumnType("int");

                    b.Property<int>("MinSensorDPI")
                        .HasColumnType("int");

                    b.Property<string>("SensorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasIndex("BacklightId");

                    b.ToTable("Mouses");
                });

            modelBuilder.Entity("eStore.Application.Entities.Mousepad", b =>
                {
                    b.HasBaseType("eStore.Application.Entities.Goods");

                    b.Property<int>("BacklightId")
                        .HasColumnType("int");

                    b.Property<int>("BottomMaterialId")
                        .HasColumnType("int");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<bool>("IsStitched")
                        .HasColumnType("bit");

                    b.Property<float>("Length")
                        .HasColumnType("real");

                    b.Property<int>("TopMaterialId")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasIndex("BacklightId");

                    b.HasIndex("BottomMaterialId");

                    b.HasIndex("TopMaterialId");

                    b.ToTable("Mousepads");
                });

            modelBuilder.Entity("eStore.Application.Entities.DeviceConnectionType", b =>
                {
                    b.HasOne("eStore.Application.Entities.ConnectionType", "ConnectionType")
                        .WithMany("Goods")
                        .HasForeignKey("ConnectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Application.Entities.Goods", "Goods")
                        .WithMany("ConnectionTypes")
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConnectionType");

                    b.Navigation("Goods");
                });

            modelBuilder.Entity("eStore.Application.Entities.GamepadCompatibleDevice", b =>
                {
                    b.HasOne("eStore.Application.Entities.CompatibleDevice", "CompatibleDevice")
                        .WithMany("Gamepads")
                        .HasForeignKey("CompatibleDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Application.Entities.Gamepad", "Gamepad")
                        .WithMany("CompatibleDevices")
                        .HasForeignKey("GamepadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompatibleDevice");

                    b.Navigation("Gamepad");
                });

            modelBuilder.Entity("eStore.Application.Entities.Goods", b =>
                {
                    b.HasOne("eStore.Application.Entities.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("eStore.Application.Entities.GoodsInCart", b =>
                {
                    b.HasOne("eStore.Application.Entities.ShoppingCart", "Cart")
                        .WithMany("Goods")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Application.Entities.Goods", "Goods")
                        .WithMany("GoodsInCarts")
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Goods");
                });

            modelBuilder.Entity("eStore.Application.Entities.KeyboardSwitch", b =>
                {
                    b.HasOne("eStore.Application.Entities.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("eStore.Application.Entities.Order", b =>
                {
                    b.HasOne("eStore.Application.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("eStore.Application.Entities.OrderItem", b =>
                {
                    b.HasOne("eStore.Application.Entities.Goods", "Goods")
                        .WithMany("OrderItems")
                        .HasForeignKey("GoodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Application.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Goods");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("eStore.Application.Entities.ShoppingCart", b =>
                {
                    b.HasOne("eStore.Application.Entities.Customer", "Customer")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("eStore.Application.Entities.ShoppingCart", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("eStore.Application.Entities.Gamepad", b =>
                {
                    b.HasOne("eStore.Application.Entities.Feedback", "Feedback")
                        .WithMany("Gamepads")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Application.Entities.Goods", null)
                        .WithOne()
                        .HasForeignKey("eStore.Application.Entities.Gamepad", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("eStore.Application.Entities.Keyboard", b =>
                {
                    b.HasOne("eStore.Application.Entities.Backlight", "Backlight")
                        .WithMany()
                        .HasForeignKey("BacklightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Application.Entities.Material", "FrameMaterial")
                        .WithMany()
                        .HasForeignKey("FrameMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Application.Entities.Goods", null)
                        .WithOne()
                        .HasForeignKey("eStore.Application.Entities.Keyboard", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("eStore.Application.Entities.KeyRollover", "KeyRollover")
                        .WithMany("Keyboards")
                        .HasForeignKey("KeyRolloverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Application.Entities.Material", "KeycapMaterial")
                        .WithMany()
                        .HasForeignKey("KeycapMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Application.Entities.KeyboardSize", "Size")
                        .WithMany("Keyboards")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Application.Entities.KeyboardSwitch", "Switch")
                        .WithMany("Keyboards")
                        .HasForeignKey("SwitchId");

                    b.HasOne("eStore.Application.Entities.KeyboardType", "Type")
                        .WithMany("Keyboards")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Backlight");

                    b.Navigation("FrameMaterial");

                    b.Navigation("KeycapMaterial");

                    b.Navigation("KeyRollover");

                    b.Navigation("Size");

                    b.Navigation("Switch");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("eStore.Application.Entities.Mouse", b =>
                {
                    b.HasOne("eStore.Application.Entities.Backlight", "Backlight")
                        .WithMany()
                        .HasForeignKey("BacklightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Application.Entities.Goods", null)
                        .WithOne()
                        .HasForeignKey("eStore.Application.Entities.Mouse", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Backlight");
                });

            modelBuilder.Entity("eStore.Application.Entities.Mousepad", b =>
                {
                    b.HasOne("eStore.Application.Entities.Backlight", "Backlight")
                        .WithMany()
                        .HasForeignKey("BacklightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Application.Entities.Material", "BottomMaterial")
                        .WithMany()
                        .HasForeignKey("BottomMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eStore.Application.Entities.Goods", null)
                        .WithOne()
                        .HasForeignKey("eStore.Application.Entities.Mousepad", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("eStore.Application.Entities.Material", "TopMaterial")
                        .WithMany()
                        .HasForeignKey("TopMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Backlight");

                    b.Navigation("BottomMaterial");

                    b.Navigation("TopMaterial");
                });

            modelBuilder.Entity("eStore.Application.Entities.CompatibleDevice", b =>
                {
                    b.Navigation("Gamepads");
                });

            modelBuilder.Entity("eStore.Application.Entities.ConnectionType", b =>
                {
                    b.Navigation("Goods");
                });

            modelBuilder.Entity("eStore.Application.Entities.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("eStore.Application.Entities.Feedback", b =>
                {
                    b.Navigation("Gamepads");
                });

            modelBuilder.Entity("eStore.Application.Entities.Goods", b =>
                {
                    b.Navigation("ConnectionTypes");

                    b.Navigation("GoodsInCarts");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("eStore.Application.Entities.KeyRollover", b =>
                {
                    b.Navigation("Keyboards");
                });

            modelBuilder.Entity("eStore.Application.Entities.KeyboardSize", b =>
                {
                    b.Navigation("Keyboards");
                });

            modelBuilder.Entity("eStore.Application.Entities.KeyboardSwitch", b =>
                {
                    b.Navigation("Keyboards");
                });

            modelBuilder.Entity("eStore.Application.Entities.KeyboardType", b =>
                {
                    b.Navigation("Keyboards");
                });

            modelBuilder.Entity("eStore.Application.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("eStore.Application.Entities.ShoppingCart", b =>
                {
                    b.Navigation("Goods");
                });

            modelBuilder.Entity("eStore.Application.Entities.Gamepad", b =>
                {
                    b.Navigation("CompatibleDevices");
                });
#pragma warning restore 612, 618
        }
    }
}
